#include <common.h>
#include <command.h>
#include <asm/mipsregs.h>
#include <asm/addrspace.h>
#include <config.h>
#include <version.h>
#include <atheros.h>

extern int ath_ddr_initial_config(uint32_t refresh);
extern int ath_ddr_find_size(void);

#ifdef COMPRESSED_UBOOT
#	define prmsg(...)
#	define args		char *s
#	define board_str(a)	do {			\
	char ver[] = "0";				\
	strcpy(s, a " - Scorpion 1.");			\
	ver[0] += ath_reg_rd(RST_REVISION_ID_ADDRESS)	\
						& 0xf;	\
	strcat(s, ver);					\
} while (0)
#else
#	define prmsg	printf
#	define args		void
#	define board_str(a)				\
	printf(a " - Scorpion 1.%d", ath_reg_rd		\
			(RST_REVISION_ID_ADDRESS) & 0xf)
#endif

void
ath_usb1_initial_config(void)
{
#define unset(a)	(~(a))

	ath_reg_wr_nf(SWITCH_CLOCK_SPARE_ADDRESS,
		ath_reg_rd(SWITCH_CLOCK_SPARE_ADDRESS) |
		SWITCH_CLOCK_SPARE_USB_REFCLK_FREQ_SEL_SET(5));
	udelay(1000);

	ath_reg_rmw_set(RST_RESET_ADDRESS,
				RST_RESET_USB_PHY_SUSPEND_OVERRIDE_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET_ADDRESS, RST_RESET_USB_PHY_RESET_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET_ADDRESS, RST_RESET_USB_PHY_ARESET_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET_ADDRESS, RST_RESET_USB_HOST_RESET_SET(1));
	udelay(1000);

	ath_reg_rmw_clear(RST_RESET_ADDRESS, RST_RESET_USB_PHY_PLL_PWD_EXT_SET(1));
	udelay(10);

	ath_reg_rmw_set(RST_RESET2_ADDRESS, RST_RESET2_USB1_EXT_PWR_SEQ_SET(1));
	udelay(10);
}

void
ath_usb2_initial_config(void)
{
	if (is_drqfn()) {
		return;
	}

	ath_reg_rmw_set(RST_RESET2_ADDRESS, RST_RESET2_USB2_MODE_SET(1));
	udelay(10);
	ath_reg_rmw_set(RST_RESET2_ADDRESS,
				RST_RESET2_USB_PHY2_SUSPEND_OVERRIDE_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET2_ADDRESS, RST_RESET2_USB_PHY2_RESET_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET2_ADDRESS, RST_RESET2_USB_PHY2_ARESET_SET(1));
	udelay(1000);
	ath_reg_rmw_clear(RST_RESET2_ADDRESS, RST_RESET2_USB_HOST2_RESET_SET(1));
	udelay(1000);

	ath_reg_rmw_clear(RST_RESET2_ADDRESS, RST_RESET2_USB_PHY2_PLL_PWD_EXT_SET(1));
	udelay(10);

	ath_reg_rmw_set(RST_RESET2_ADDRESS, RST_RESET2_USB2_EXT_PWR_SEQ_SET(1));
	udelay(10);
}


void ath_gpio_config(void)
{
	/* disable the CLK_OBS on GPIO_4 and set GPIO4 as input */
	ath_reg_rmw_clear(GPIO_OE_ADDRESS, (1 << 4));
	ath_reg_rmw_clear(GPIO_OUT_FUNCTION1_ADDRESS, GPIO_OUT_FUNCTION1_ENABLE_GPIO_4_MASK);
	ath_reg_rmw_set(GPIO_OUT_FUNCTION1_ADDRESS, GPIO_OUT_FUNCTION1_ENABLE_GPIO_4_SET(0x80));
	ath_reg_rmw_set(GPIO_OE_ADDRESS, (1 << 4));
	/* Set GPIO 13 as input for LED functionality to be OFF during bootup */
	ath_reg_rmw_set(GPIO_OE_ADDRESS, (1 << 13));
	/* Turn off JUMPST_LED and 5Gz LED during bootup */
	ath_reg_rmw_set(GPIO_OE_ADDRESS, (1 << 15));
	ath_reg_rmw_set(GPIO_OE_ADDRESS, (1 << 12));

//AY001 - {
	ath_reg_rmw_set(0x1804000c, (1 << 17));
	ath_reg_rmw_clear(0x18040000, 0x200010);
	ath_reg_rmw_set(0x1804000c, (1 << 4));
	RGB_LED_control(5);
	RGB_LED_control(5);
	udelay(200000);
	ath_reg_rmw_set(0x18040010, (1 << 4));
	RGB_LED_control(1);
	udelay(200000);
	RGB_LED_control(2);
	udelay(200000);
	RGB_LED_control(3);
	udelay(200000);
	RGB_LED_control(4);
	udelay(200000);
	RGB_LED_control(5);
	ath_reg_rmw_set(0x1804000c, (1 << 21));
	udelay(200000);
	ath_reg_rmw_set(0x18040010, (1 << 21));
//AY001 - }


}

//Ben002
void RGB_LED_control(unsigned int RGB)
{
        ulong   count,Red,Blue,Green;
        int i=49;
        ath_reg_rmw_clear(0x18040000, 0x41800);

        switch(RGB){
        case 1:
                Red=0xf;
                Blue=0x0;
                Green=0x0;
                break;
        case 2:
                Red=0x0;
                Blue=0xf;
                Green=0x0;
                break;
        case 3:
                Red=0x0;
                Blue=0x0;
                Green=0xf;
                break;
        case 4:
                Red=0xf;
                Blue=0xf;
                Green=0xf;
                break;
        case 5:
                Red=0x0;
                Blue=0x0;
                Green=0x0;
	break;
        default:
                printf("Command error\n");
                return 1;
        }
        while (i-- > 0){
                if(i==48)
                count=Red;
                if(i==32)
                count=Blue;
                if(i==16)
                count=Green;
                if(count != 0x0){
                udelay(5);
                ath_reg_rmw_set(0x1804000c, 0x1000);
                udelay(5);
                ath_reg_rmw_set(0x1804000c, 0x800);
                udelay(5);
                ath_reg_rmw_set(0x18040010, 0x800);
                udelay(5);
                ath_reg_rmw_set(0x18040010, 0x1000);
                }else{
                udelay(10);
                ath_reg_rmw_set(0x1804000c, 0x800);
                udelay(5);
                ath_reg_rmw_set(0x18040010, 0x800);
                udelay(5);
                }
        if(count!=0)
        count=count--;
        }
        udelay(5);
        ath_reg_rmw_set(0x1804000c, 0x40000);
        udelay(5);
        ath_reg_rmw_set(0x18040010, 0x40000);
        udelay(5);

}
//Ben002

int
ath_mem_config(void)
{
	unsigned int type, reg32, *tap;
	extern uint32_t *ath_ddr_tap_cal(void);

#if !defined(CONFIG_ATH_EMULATION)

#if !defined(CONFIG_ATH_NAND_BR)
	type = ath_ddr_initial_config(CFG_DDR_REFRESH_VAL);

	tap = ath_ddr_tap_cal();
	prmsg("tap = 0x%p\n", tap);

	tap = (uint32_t *)0xbd007f10;
	prmsg("Tap (low, high) = (0x%x, 0x%x)\n", tap[0], tap[1]);

	tap = (uint32_t *)TAP_CONTROL_0_ADDRESS;
	prmsg("Tap values = (0x%x, 0x%x, 0x%x, 0x%x)\n",
		tap[0], tap[2], tap[2], tap[3]);

	/* Take WMAC out of reset */
	reg32 = ath_reg_rd(RST_RESET_ADDRESS);
	reg32 = reg32 & ~RST_RESET_RTC_RESET_SET(1);
	ath_reg_wr_nf(RST_RESET_ADDRESS, reg32);
#endif

	ath_usb1_initial_config();
	ath_usb2_initial_config();

	ath_gpio_config();
#endif /* !defined(CONFIG_ATH_EMULATION) */

	return ath_ddr_find_size();
}

long int initdram(int board_type)
{
	return (ath_mem_config());
}

int	checkboard(args)
{
	board_str(CONFIG_BOARD_NAME);
	return 0;
}

#ifdef CONFIG_GPIO_CUSTOM
int gpio_custom (int opcode)
{
        int rcode = 0;
        static int cmd = -1;

        switch (opcode) {
                case 0:
                        if (0) {
                                cmd = 0;
                        }
                        else {
                                cmd = -1;
                        }
                        rcode = cmd >= 0;
                        break;
                case 1:
                        switch (cmd) {
                                case 0:
                                {
                                        char key[] = "netretry", *val = NULL, *s = NULL;
                                        int i = -1;

                                        if ((s = getenv (key)) != NULL && (val = malloc (strlen (s) + 1)) != NULL) {
                                                strcpy (val, s);
                                        }
                                        setenv (key, "no");
                                        s = getenv ("factory_boot") != NULL? "run factory_boot": "boot 0";
                                        for (i = 3; i-- > 0 && run_command (s, 0) == -1;) {
                                                printf ("Retry%s\n", i > 0? "...": " count exceeded!");
                                                if (i <= 0) {
                                                        run_command ("boot", 0);
                                                }
                                        }
                                        if (val != NULL) {
                                                setenv (key, val);
                                        }
                                        break;
                                }
                                default:
                                        break;
                        }
                        cmd = -1;
                        break;
                default:
                        break;
        }

        return rcode;
}
#endif

